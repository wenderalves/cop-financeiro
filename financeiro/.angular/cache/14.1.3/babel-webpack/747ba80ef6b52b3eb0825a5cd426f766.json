{"ast":null,"code":"import logger from '../../utils/logger';\nimport isSubset from '../../utils/isSubset';\nimport success from '../../api-utils/success';\nimport error from '../../api-utils/error';\nimport showUserErrors from '../../api-utils/showUserErrors';\nimport selectionLevel from '../../api-utils/selectionLevel';\nexport default function set(newDocument, options = {\n  keys: false\n}) {\n  let collectionName = this.collectionName;\n  let docSelectionCriteria = this.docSelectionCriteria;\n  let currentSelectionLevel = selectionLevel.call(this);\n  return new Promise((resolve, reject) => {\n    // set collection\n    this.setCollection = () => {\n      this.lf[collectionName].clear().then(() => {\n        if (!options.keys) {\n          newDocument.forEach(doc => {\n            this.add(doc);\n          });\n          resolve(success.call(this, `Collection \"${collectionName}\" set with ${newDocument.length} Documents.`, newDocument));\n        } else {\n          console.log('keys provided'); // check that every document in array has a _key property\n\n          let docsWithoutKey = 0;\n          newDocument.forEach(doc => {\n            if (!doc.hasOwnProperty('_key')) {\n              docsWithoutKey++;\n            }\n          });\n\n          if (docsWithoutKey) {\n            reject(error.call(this, `Documents provided to .set() in an array must each have a _key property set to a string.`));\n          } else {\n            newDocument.forEach(doc => {\n              let key = doc._key;\n              delete doc._key;\n              this.add(doc, key);\n            });\n            resolve(success.call(this, `Collection \"${collectionName}\" set with ${newDocument.length} Documents.`, newDocument));\n          }\n        }\n      }).catch(err => {\n        reject(error.call(this, `Could not set ${collectionName} Collection with data ${JSON.stringify(newDocument)}.`));\n      });\n    }; // set document\n\n\n    this.setDocument = () => {\n      // set document by criteria\n      this.setDocumentByCriteria = () => {\n        let docsToSet = [];\n        this.lf[collectionName].iterate((value, key) => {\n          if (isSubset(value, docSelectionCriteria)) {\n            docsToSet.push({\n              key,\n              newDocument\n            });\n          }\n        }).then(() => {\n          if (!docsToSet.length) {\n            reject(error.call(this, `No Documents found in ${collectionName} Collection with criteria ${JSON.stringify(docSelectionCriteria)}.`));\n          }\n\n          if (docsToSet.length > 1) {\n            logger.warn.call(this, `Multiple documents (${docsToSet.length}) with ${JSON.stringify(docSelectionCriteria)} found for setting.`);\n          }\n        }).then(() => {\n          docsToSet.forEach((docToSet, index) => {\n            this.lf[collectionName].setItem(docToSet.key, docToSet.newDocument).then(value => {\n              if (index === docsToSet.length - 1) {\n                resolve(success.call(this, `${docsToSet.length} Document${docsToSet.length > 1 ? 's' : ''} in \"${collectionName}\" collection with ${JSON.stringify(docSelectionCriteria)} was set.`, newDocument));\n              }\n            }).catch(err => {\n              reject(error.call(this, `Could not set ${docsToSet.length} Documents in ${collectionName} Collection.`));\n            });\n          });\n        });\n      }; // set document by key\n\n\n      this.setDocumentByKey = () => {\n        this.lf[collectionName].setItem(docSelectionCriteria, newDocument).then(value => {\n          resolve(success.call(this, `Document in \"${collectionName}\" collection with key ${JSON.stringify(docSelectionCriteria)} was set.`, newDocument));\n        }).catch(err => {\n          reject(error.call(this, `Document in \"${collectionName}\" collection with key ${JSON.stringify(docSelectionCriteria)} could not be set.`));\n        });\n      };\n\n      if (typeof docSelectionCriteria == 'object') {\n        return this.setDocumentByCriteria();\n      } else {\n        return this.setDocumentByKey();\n      }\n    }; // check for user errors\n\n\n    if (!newDocument) {\n      this.userErrors.push('No new Document object provided to set() method. Use an object e.g. { id: 1, name: \"Bill\", age: 47 }');\n    } else if (currentSelectionLevel === 'doc') {\n      if (!(typeof newDocument == 'object' && newDocument instanceof Array == false)) {\n        this.userErrors.push('Data passed to .set() must be an object. Not an array, string, number or boolean.');\n      }\n    } else if (currentSelectionLevel === 'collection') {\n      if (!(typeof newDocument == 'object' && newDocument instanceof Array == true)) {\n        this.userErrors.push('Data passed to .set() must be an array of objects. Not an object, string, number or boolean.');\n      }\n    }\n\n    if (!this.userErrors.length) {\n      if (currentSelectionLevel == 'collection') {\n        return this.setCollection();\n      } else if (currentSelectionLevel == 'doc') {\n        return this.setDocument();\n      }\n    } else {\n      showUserErrors.call(this);\n    }\n  });\n}","map":null,"metadata":{},"sourceType":"module"}