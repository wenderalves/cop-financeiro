{"ast":null,"code":"let UUID = require('ordered-uuid');\n\nimport success from '../../api-utils/success';\nimport error from '../../api-utils/error';\nimport showUserErrors from '../../api-utils/showUserErrors';\nexport default function add(data, keyProvided) {\n  // check for user errors\n  if (!data) {\n    this.userErrors.push('No data specified in add() method. You must use an object, e.g { id: 1, name: \"Bill\", age: 47 }');\n  } else if (!(typeof data == 'object' && data instanceof Array == false)) {\n    this.userErrors.push('Data passed to .add() must be an object. Not an array, string, number or boolean.');\n  } // no user errors, do the add\n\n\n  if (!this.userErrors.length) {\n    let collectionName = this.collectionName;\n    return new Promise((resolve, reject) => {\n      let key = null; // if no key provided, generate random, ordered key\n\n      if (!keyProvided) {\n        key = UUID.generate();\n      } else {\n        key = keyProvided;\n      }\n\n      return this.lf[collectionName].setItem(key, data).then(() => {\n        resolve(success.call(this, `Document added to \"${collectionName}\" collection.`, {\n          key,\n          data\n        }));\n      }).catch(err => {\n        reject(error.call(this, `Could not add Document to ${collectionName} collection.`));\n      });\n    });\n  } else {\n    showUserErrors.call(this);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}