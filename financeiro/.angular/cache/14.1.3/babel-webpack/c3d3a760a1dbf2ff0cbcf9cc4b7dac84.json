{"ast":null,"code":"import isSubset from '../../utils/isSubset';\nimport logger from \"../../utils/logger\";\nimport reset from '../../api-utils/reset';\nimport selectionLevel from '../../api-utils/selectionLevel';\nimport showUserErrors from '../../api-utils/showUserErrors';\nexport default function get(options = {\n  keys: false\n}) {\n  // get collection\n  this.getCollection = () => {\n    let collectionName = this.collectionName;\n    let orderByProperty = this.orderByProperty;\n    let orderByDirection = this.orderByDirection;\n    let limitBy = this.limitBy;\n    let collection = [];\n    return this.lf[collectionName].iterate((value, key) => {\n      let collectionItem = {};\n\n      if (!options.keys) {\n        collectionItem = value;\n      } else {\n        collectionItem = {\n          key: key,\n          data: value\n        };\n      }\n\n      collection.push(collectionItem);\n    }).then(() => {\n      let logMessage = `Got \"${collectionName}\" collection`; // orderBy\n\n      if (orderByProperty) {\n        logMessage += `, ordered by \"${orderByProperty}\"`;\n\n        if (!options.keys) {\n          collection.sort((a, b) => {\n            return a[orderByProperty].toString().localeCompare(b[orderByProperty].toString());\n          });\n        } else {\n          collection.sort((a, b) => {\n            return a.data[orderByProperty].toString().localeCompare(b.data[orderByProperty].toString());\n          });\n        }\n      }\n\n      if (orderByDirection == 'desc') {\n        logMessage += ` (descending)`;\n        collection.reverse();\n      } // limit\n\n\n      if (limitBy) {\n        logMessage += `, limited to ${limitBy}`;\n        collection = collection.splice(0, limitBy);\n      }\n\n      logMessage += `:`;\n      logger.log.call(this, logMessage, collection);\n      reset.call(this);\n      return collection;\n    });\n  }; // get document\n\n\n  this.getDocument = () => {\n    let collectionName = this.collectionName;\n    let docSelectionCriteria = this.docSelectionCriteria;\n    let collection = [];\n    let document = {}; // get document by criteria\n\n    this.getDocumentByCriteria = () => {\n      return this.lf[collectionName].iterate((value, key) => {\n        if (isSubset(value, docSelectionCriteria)) {\n          collection.push(value);\n        }\n      }).then(() => {\n        if (!collection.length) {\n          logger.error.call(this, `Could not find Document in \"${collectionName}\" collection with criteria: ${JSON.stringify(docSelectionCriteria)}`);\n        } else {\n          document = collection[0];\n          logger.log.call(this, `Got Document with ${JSON.stringify(docSelectionCriteria)}:`, document);\n          reset.call(this);\n          return document;\n        }\n      });\n    }; // get document by key\n\n\n    this.getDocumentByKey = () => {\n      return this.lf[collectionName].getItem(docSelectionCriteria).then(value => {\n        document = value;\n\n        if (document) {\n          logger.log.call(this, `Got Document with key ${JSON.stringify(docSelectionCriteria)}:`, document);\n        } else {\n          logger.error.call(this, `Could not find Document in \"${collectionName}\" collection with Key: ${JSON.stringify(docSelectionCriteria)}`);\n        }\n\n        reset.call(this);\n        return document;\n      }).catch(err => {\n        logger.error.call(this, `Could not find Document in \"${collectionName}\" collection with Key: ${JSON.stringify(docSelectionCriteria)}`);\n        reset.call(this);\n      });\n    };\n\n    if (typeof docSelectionCriteria == 'object') {\n      return this.getDocumentByCriteria();\n    } else {\n      return this.getDocumentByKey();\n    }\n  }; // check for user errors\n\n\n  if (!(typeof options == 'object' && options instanceof Array == false)) {\n    this.userErrors.push('Data passed to .get() must be an object. Not an array, string, number or boolean. The object must contain a \"keys\" property set to true or false, e.g. { keys: true }');\n  } else {\n    if (!options.hasOwnProperty('keys')) {\n      this.userErrors.push('Object passed to get() method must contain a \"keys\" property set to boolean true or false, e.g. { keys: true }');\n    } else {\n      if (typeof options.keys !== 'boolean') {\n        this.userErrors.push('Property \"keys\" passed into get() method must be assigned a boolean value (true or false). Not a string or integer.');\n      }\n    }\n  }\n\n  if (!this.userErrors.length) {\n    let currentSelectionLevel = selectionLevel.call(this);\n\n    if (currentSelectionLevel == 'collection') {\n      return this.getCollection();\n    } else if (currentSelectionLevel == 'doc') {\n      return this.getDocument();\n    }\n  } else {\n    showUserErrors.call(this);\n    return null;\n  }\n}","map":{"version":3,"names":["isSubset","logger","reset","selectionLevel","showUserErrors","get","options","keys","getCollection","collectionName","orderByProperty","orderByDirection","limitBy","collection","lf","iterate","value","key","collectionItem","data","push","then","logMessage","sort","a","b","toString","localeCompare","reverse","splice","log","call","getDocument","docSelectionCriteria","document","getDocumentByCriteria","length","error","JSON","stringify","getDocumentByKey","getItem","catch","err","Array","userErrors","hasOwnProperty","currentSelectionLevel"],"sources":["D:/wender/projetos/cop-financeiro/financeiro/node_modules/localbase/localbase/api/actions/get.js"],"sourcesContent":["import isSubset from '../../utils/isSubset'\nimport logger from \"../../utils/logger\"\nimport reset from '../../api-utils/reset'\nimport selectionLevel from '../../api-utils/selectionLevel'\nimport showUserErrors from '../../api-utils/showUserErrors'\n\nexport default function get(options = { keys: false }) {\n\n  // get collection\n  this.getCollection = () => {\n    let collectionName = this.collectionName\n    let orderByProperty = this.orderByProperty\n    let orderByDirection = this.orderByDirection\n    let limitBy = this.limitBy\n\n    let collection = []\n    return this.lf[collectionName].iterate((value, key) => {\n      let collectionItem = {}\n      if (!options.keys) {\n        collectionItem = value\n      }\n      else {\n        collectionItem = {\n          key: key,\n          data: value\n        }\n      }\n      collection.push(collectionItem)\n    }).then(() => {\n      let logMessage = `Got \"${ collectionName }\" collection`\n      // orderBy\n      if (orderByProperty) {\n        logMessage += `, ordered by \"${ orderByProperty }\"`\n        if (!options.keys) {\n          collection.sort((a, b) => {\n            return a[orderByProperty].toString().localeCompare(b[orderByProperty].toString())\n          })\n        }\n        else {\n          collection.sort((a, b) => {\n            return a.data[orderByProperty].toString().localeCompare(b.data[orderByProperty].toString())\n          })\n        }\n      }\n      if (orderByDirection == 'desc') {\n        logMessage += ` (descending)`\n        collection.reverse()\n      }\n      // limit\n      if (limitBy) {\n        logMessage += `, limited to ${ limitBy }`\n        collection = collection.splice(0,limitBy)\n      }\n      logMessage += `:`\n      logger.log.call(this, logMessage, collection)\n      reset.call(this)\n      return collection\n    })\n  }\n\n  // get document\n  this.getDocument = () => {\n    let collectionName = this.collectionName\n    let docSelectionCriteria = this.docSelectionCriteria\n\n    let collection = []\n    let document = {}\n\n    // get document by criteria\n    this.getDocumentByCriteria = () => {\n      return this.lf[collectionName].iterate((value, key) => {\n        if (isSubset(value, docSelectionCriteria)) {\n          collection.push(value)\n        }\n      }).then(() => {\n        if (!collection.length) {\n          logger.error.call(this, `Could not find Document in \"${ collectionName }\" collection with criteria: ${ JSON.stringify(docSelectionCriteria)}`)\n        }\n        else {\n          document = collection[0]\n          logger.log.call(this, `Got Document with ${ JSON.stringify(docSelectionCriteria) }:`, document)\n          reset.call(this)\n          return document\n        }\n      })\n    }\n\n    // get document by key\n    this.getDocumentByKey = () => {\n      return this.lf[collectionName].getItem(docSelectionCriteria).then((value) => {\n        document = value\n        if (document) {\n          logger.log.call(this, `Got Document with key ${ JSON.stringify(docSelectionCriteria) }:`, document)\n        }\n        else {\n          logger.error.call(this, `Could not find Document in \"${ collectionName }\" collection with Key: ${ JSON.stringify(docSelectionCriteria)}`)\n        }\n        reset.call(this)\n        return document\n      }).catch(err => {\n        logger.error.call(this, `Could not find Document in \"${ collectionName }\" collection with Key: ${ JSON.stringify(docSelectionCriteria)}`)\n        reset.call(this)\n      });\n    }\n\n    if (typeof docSelectionCriteria == 'object') {\n      return this.getDocumentByCriteria()\n    }\n    else {\n      return this.getDocumentByKey()\n    }\n  }\n\n  // check for user errors\n  if (!(typeof options == 'object' && options instanceof Array == false)) {\n    this.userErrors.push('Data passed to .get() must be an object. Not an array, string, number or boolean. The object must contain a \"keys\" property set to true or false, e.g. { keys: true }')\n  }\n  else {\n    if (!options.hasOwnProperty('keys')) {\n      this.userErrors.push('Object passed to get() method must contain a \"keys\" property set to boolean true or false, e.g. { keys: true }')\n    }\n    else {\n      if (typeof options.keys !== 'boolean') {\n        this.userErrors.push('Property \"keys\" passed into get() method must be assigned a boolean value (true or false). Not a string or integer.')\n      }\n    }\n  }\n\n  if (!this.userErrors.length) {\n    let currentSelectionLevel = selectionLevel.call(this)\n\n    if (currentSelectionLevel == 'collection') {\n      return this.getCollection()\n    }\n    else if (currentSelectionLevel == 'doc') {\n      return this.getDocument()\n    }\n  }\n  else {\n    showUserErrors.call(this)\n    return null\n  }\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}