{"ast":null,"code":"import isSubset from '../../utils/isSubset';\nimport logger from \"../../utils/logger\";\nimport reset from '../../api-utils/reset';\nimport selectionLevel from '../../api-utils/selectionLevel';\nimport showUserErrors from '../../api-utils/showUserErrors';\nexport default function get(options = {\n  keys: false\n}) {\n  // get collection\n  this.getCollection = () => {\n    let collectionName = this.collectionName;\n    let orderByProperty = this.orderByProperty;\n    let orderByDirection = this.orderByDirection;\n    let limitBy = this.limitBy;\n    let collection = [];\n    return this.lf[collectionName].iterate((value, key) => {\n      let collectionItem = {};\n\n      if (!options.keys) {\n        collectionItem = value;\n      } else {\n        collectionItem = {\n          key: key,\n          data: value\n        };\n      }\n\n      collection.push(collectionItem);\n    }).then(() => {\n      let logMessage = `Got \"${collectionName}\" collection`; // orderBy\n\n      if (orderByProperty) {\n        logMessage += `, ordered by \"${orderByProperty}\"`;\n\n        if (!options.keys) {\n          collection.sort((a, b) => {\n            return a[orderByProperty].toString().localeCompare(b[orderByProperty].toString());\n          });\n        } else {\n          collection.sort((a, b) => {\n            return a.data[orderByProperty].toString().localeCompare(b.data[orderByProperty].toString());\n          });\n        }\n      }\n\n      if (orderByDirection == 'desc') {\n        logMessage += ` (descending)`;\n        collection.reverse();\n      } // limit\n\n\n      if (limitBy) {\n        logMessage += `, limited to ${limitBy}`;\n        collection = collection.splice(0, limitBy);\n      }\n\n      logMessage += `:`;\n      logger.log.call(this, logMessage, collection);\n      reset.call(this);\n      return collection;\n    });\n  }; // get document\n\n\n  this.getDocument = () => {\n    let collectionName = this.collectionName;\n    let docSelectionCriteria = this.docSelectionCriteria;\n    let collection = [];\n    let document = {}; // get document by criteria\n\n    this.getDocumentByCriteria = () => {\n      return this.lf[collectionName].iterate((value, key) => {\n        if (isSubset(value, docSelectionCriteria)) {\n          collection.push(value);\n        }\n      }).then(() => {\n        if (!collection.length) {\n          logger.error.call(this, `Could not find Document in \"${collectionName}\" collection with criteria: ${JSON.stringify(docSelectionCriteria)}`);\n        } else {\n          document = collection[0];\n          logger.log.call(this, `Got Document with ${JSON.stringify(docSelectionCriteria)}:`, document);\n          reset.call(this);\n          return document;\n        }\n      });\n    }; // get document by key\n\n\n    this.getDocumentByKey = () => {\n      return this.lf[collectionName].getItem(docSelectionCriteria).then(value => {\n        document = value;\n\n        if (document) {\n          logger.log.call(this, `Got Document with key ${JSON.stringify(docSelectionCriteria)}:`, document);\n        } else {\n          logger.error.call(this, `Could not find Document in \"${collectionName}\" collection with Key: ${JSON.stringify(docSelectionCriteria)}`);\n        }\n\n        reset.call(this);\n        return document;\n      }).catch(err => {\n        logger.error.call(this, `Could not find Document in \"${collectionName}\" collection with Key: ${JSON.stringify(docSelectionCriteria)}`);\n        reset.call(this);\n      });\n    };\n\n    if (typeof docSelectionCriteria == 'object') {\n      return this.getDocumentByCriteria();\n    } else {\n      return this.getDocumentByKey();\n    }\n  }; // check for user errors\n\n\n  if (!(typeof options == 'object' && options instanceof Array == false)) {\n    this.userErrors.push('Data passed to .get() must be an object. Not an array, string, number or boolean. The object must contain a \"keys\" property set to true or false, e.g. { keys: true }');\n  } else {\n    if (!options.hasOwnProperty('keys')) {\n      this.userErrors.push('Object passed to get() method must contain a \"keys\" property set to boolean true or false, e.g. { keys: true }');\n    } else {\n      if (typeof options.keys !== 'boolean') {\n        this.userErrors.push('Property \"keys\" passed into get() method must be assigned a boolean value (true or false). Not a string or integer.');\n      }\n    }\n  }\n\n  if (!this.userErrors.length) {\n    let currentSelectionLevel = selectionLevel.call(this);\n\n    if (currentSelectionLevel == 'collection') {\n      return this.getCollection();\n    } else if (currentSelectionLevel == 'doc') {\n      return this.getDocument();\n    }\n  } else {\n    showUserErrors.call(this);\n    return null;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}