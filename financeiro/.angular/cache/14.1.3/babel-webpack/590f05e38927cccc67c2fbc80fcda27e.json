{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { LocalDB } from 'src/app/share/utils/localbase';\nimport * as i0 from \"@angular/core\";\nexport let LancamentosService = /*#__PURE__*/(() => {\n  class LancamentosService {\n    constructor() {\n      this._tabela = 'lancamentos';\n      this._db = new LocalDB().getDB();\n    }\n\n    getAll() {\n      return __awaiter(this, void 0, void 0, function* () {\n        return yield this._db.collection(this._tabela).get();\n      });\n    }\n\n    add(item) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return yield this._db.collection(this._tabela).add(item);\n      });\n    }\n\n    remove(id) {\n      return __awaiter(this, void 0, void 0, function* () {\n        return yield this._db.collection(this._tabela).doc({\n          id: id\n        }).delete();\n      });\n    }\n\n    groupByDate() {\n      return __awaiter(this, void 0, void 0, function* () {\n        return yield this.getAll().then(itens => __awaiter(this, void 0, void 0, function* () {\n          const result = {};\n          itens.forEach(it => {\n            const data = new Date(it.dataMovimento).toISOString().split('T')[0];\n            if (!result[data]) return result[data] = [it];\n            return result[data].push(it);\n          });\n          return yield result;\n        }));\n      });\n    }\n\n  }\n\n  LancamentosService.ɵfac = function LancamentosService_Factory(t) {\n    return new (t || LancamentosService)();\n  };\n\n  LancamentosService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LancamentosService,\n    factory: LancamentosService.ɵfac,\n    providedIn: 'root'\n  });\n  return LancamentosService;\n})();","map":{"version":3,"mappings":";AACA,SAASA,OAAT,QAAwB,+BAAxB;;AAYA,WAAaC,kBAAb;EAAM,MAAOA,kBAAP,CAAyB;IAI7BC;MAFQ,eAAU,aAAV;MAGN,KAAKC,GAAL,GAAW,IAAIH,OAAJ,GAAcI,KAAd,EAAX;IACD;;IAEKC,MAAM;;QACV,OAAO,MAAM,KAAKF,GAAL,CAASG,UAAT,CAAoB,KAAKC,OAAzB,EAAkCC,GAAlC,EAAb;MACD;IAAA;;IAEKC,GAAG,CAACC,IAAD,EAAU;;QACjB,OAAO,MAAM,KAAKP,GAAL,CAASG,UAAT,CAAoB,KAAKC,OAAzB,EAAkCE,GAAlC,CAAsCC,IAAtC,CAAb;MACD;IAAA;;IAEKC,MAAM,CAACC,EAAD,EAAW;;QACrB,OAAO,MAAM,KAAKT,GAAL,CAASG,UAAT,CAAoB,KAAKC,OAAzB,EAAkCM,GAAlC,CAAsC;UAAED,EAAE,EAAEA;QAAN,CAAtC,EAAkDE,MAAlD,EAAb;MACD;IAAA;;IAEKC,WAAW;;QACf,OAAO,MAAM,KAAKV,MAAL,GAAcW,IAAd,CAA0BC,KAAP,IAAaC;UAC3C,MAAMC,MAAM,GAAG,EAAf;UACAF,KAAK,CAACG,OAAN,CAAgBC,EAAD,IAAyB;YACtC,MAAMC,IAAI,GAAG,IAAIC,IAAJ,CAASF,EAAE,CAACG,aAAZ,EAA2BC,WAA3B,GAAyCC,KAAzC,CAA+C,GAA/C,EAAoD,CAApD,CAAb;YACA,IAAI,CAACP,MAAM,CAACG,IAAD,CAAX,EAAoB,OAAOH,MAAM,CAACG,IAAD,CAAN,GAAe,CAACD,EAAD,CAAtB;YACpB,OAAOF,MAAM,CAACG,IAAD,CAAN,CAAaK,IAAb,CAAkBN,EAAlB,CAAP;UACD,CAJD;UAMA,OAAO,MAAMF,MAAb;QACD,CAT4C,CAAhC,CAAb;MAUD;IAAA;;EA/B4B;;;qBAAlBlB;EAAkB;;;WAAlBA;IAAkB2B,SAAlB3B,kBAAkB;IAAA4B,YAFjB;;EAEd,OAAa5B,kBAAb;AAAA","names":["LocalDB","LancamentosService","constructor","_db","getDB","getAll","collection","_tabela","get","add","item","remove","id","doc","delete","groupByDate","then","itens","__awaiter","result","forEach","it","data","Date","dataMovimento","toISOString","split","push","factory","providedIn"],"sourceRoot":"","sources":["D:\\wender\\projetos\\cop-financeiro\\financeiro\\src\\app\\pages\\lancamentos\\lancamento.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { LocalDB } from 'src/app/share/utils/localbase';\n\nexport interface DadosLancamentos {\n  id: number,\n  descricao: string,\n  valor: number,\n  dataMovimento: Date\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LancamentosService {\n  private _db;\n  private _tabela = 'lancamentos';\n\n  constructor() {\n    this._db = new LocalDB().getDB();\n  }\n\n  async getAll() {\n    return await this._db.collection(this._tabela).get();\n  }\n\n  async add(item: any) {\n    return await this._db.collection(this._tabela).add(item);\n  }\n\n  async remove(id: number) {\n    return await this._db.collection(this._tabela).doc({ id: id }).delete();\n  }\n\n  async groupByDate() {\n    return await this.getAll().then(async (itens) {\n      const result = {};\n      itens.forEach( (it: DadosLancamentos) => {\n        const data = new Date(it.dataMovimento).toISOString().split('T')[0];\n        if (!result[data])  return result[data] = [it];\n        return result[data].push(it);\n      });\n\n      return await result;\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}